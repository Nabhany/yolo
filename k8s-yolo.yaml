apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: mongo
spec:
  ports:
  - port: 27017
    targetPort: 27017
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  selector:
    matchLabels:
      app: mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: db
        image: mongo
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: admin
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: admin
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: dbdata
          mountPath: /data/db
      volumes:
      - name: dbdata
        hostPath:
          path: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: server
  labels:
    app: backend
spec:
  ports:
  - port: 5000
    targetPort: 5000
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
spec:
  selector:
    matchLabels:
      app: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: server
        image: docker.io/maamun/backend-docker:v1.0.0
        env:
        - name: MONGO_URL
          value: mongodb://db:27017/mydb
        ports:
        - containerPort: 5000
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: client
  labels:
    app: frontend
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
spec:
  selector:
    matchLabels:
      app: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: client
        image: docker.io/maamun/client-docker:v1.0.0
        ports:
        - containerPort: 3000
      restartPolicy: Always
      dependsOn:
      - name: server
        condition: "Ready"
---
apiVersion: v1
kind: NetworkPolicy
metadata:
  name: allow-from-yolo-project-network
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    - podSelector:
        matchLabels:
          app: backend
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5000
